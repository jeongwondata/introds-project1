# Set CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Install required packages if they are not already installed
required_packages <- c("sf", "ggplot2", "viridis", "dplyr", "lubridate")
new_packages <- required_packages[!(required_packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) {
install.packages(new_packages)
}
# Load libraries
library(sf)
library(ggplot2)
library(viridis)
library(dplyr)
library(lubridate)
# Load necessary libraries
library(dplyr)
# Load the fire incidence CSV file
#fire_data_path <- "C:/Users/SIMBAH/Desktop/Intro to Data science/Project/Fire incidences DC_VA_MD_cleaned.csv"  # Update with your actual path
#fire_data <- read.csv(fire_data_path)
# Check the structure of the data
#str(fire_data)
# 1. ANOVA: Testing for differences in means across states
# Null Hypothesis (H0): The mean number of fire incidents is the same across all states.
# Alternative Hypothesis (H1): At least one state has a mean number of fire incidents that is different from the others.
anova_result <- aov(Incident_Count ~STATE, data = fire_data)  # Adjust "Incident_Count" and "STATE" as necessary
# Load necessary libraries
library(dplyr)
# Load the fire incidence CSV file
fire_data_path <- "C:/Users/SIMBAH/Desktop/Intro to Data science/Project/Fire incidences DC_VA_MD_cleaned.csv"  # Update with your actual path
fire_data <- read.csv(fire_data_path)
# Check the structure of the data
#str(fire_data)
# 1. ANOVA: Testing for differences in means across states
# Null Hypothesis (H0): The mean number of fire incidents is the same across all states.
# Alternative Hypothesis (H1): At least one state has a mean number of fire incidents that is different from the others.
anova_result <- aov(Incident_Count ~STATE, data = fire_data)  # Adjust "Incident_Count" and "STATE" as necessary
# Load necessary libraries
library(dplyr)
# Load the fire incidence CSV file
fire_data_path <- "C:/Users/SIMBAH/Desktop/Intro to Data science/Project/Fire incidences DC_VA_MD_cleaned.csv"  # Update with your actual path
fire_data <- read.csv(fire_data_path)
# Check the structure of the data
#str(fire_data)
# 1. ANOVA: Testing for differences in means across states
# Null Hypothesis (H0): The mean number of fire incidents is the same across all states.
# Alternative Hypothesis (H1): At least one state has a mean number of fire incidents that is different from the others.
anova_result <- aov(FIRE_SIZE ~STATE, data = fire_data)  # Adjust "Incident_Count" and "STATE" as necessary
anova_summary <- summary(anova_result)
print(anova_summary)
# Post-hoc test if ANOVA is significant
if (anova_summary[[1]][["Pr(>F)"]][1] < 0.05) {  # Check if p-value is significant
tukey_result <- TukeyHSD(anova_result)  # Perform Tukey's HSD test for pairwise comparisons
print(tukey_result)
}
# 2. t-test: Compare Virginia and Maryland means
# Null Hypothesis (H0): The mean number of fire incidents in Virginia is equal to that in Maryland.
# Alternative Hypothesis (H1): The mean number of fire incidents in Virginia is not equal to that in Maryland.
va_incidents <- fire_data %>% filter(STATE == "Virginia")  # Adjust column name as necessary
md_incidents <- fire_data %>% filter(STATE == "Maryland")
t_test_result <- t.test(va_incidents$Incident_Count, md_incidents$Incident_Count, var.equal = TRUE)  # Adjust as necessary
# Load necessary libraries
library(dplyr)
# Load the fire incidence CSV file
fire_data_path <- "C:/Users/SIMBAH/Desktop/Intro to Data science/Project/Fire incidences DC_VA_MD_cleaned.csv"  # Update with your actual path
fire_data <- read.csv(fire_data_path)
# Check the structure of the data
str(fire_data)
# Ensure NWCG_CAUSE_A_COUNT (or similar) is numeric
fire_data$NWCG_CAUSE_A_COUNT <- as.numeric(fire_data$NWCG_CAUSE_A_COUNT)
# Load necessary libraries
library(dplyr)
# Load the fire incidence CSV file
fire_data_path <- "C:/Users/SIMBAH/Desktop/Intro to Data science/Project/Fire incidences DC_VA_MD_cleaned.csv"  # Update with your actual path
fire_data <- read.csv(fire_data_path)
# Check the structure of the data
str(fire_data)
# Check existing column names
print(colnames(fire_data))
# Ensure NWCG_CAUSE_A_COUNT is a numeric column
# First, check if the column exists and is of the correct type
if ("NWCG_CAUSE_A_COUNT" %in% colnames(fire_data)) {
# Try converting to numeric, suppressing warnings
fire_data$NWCG_CAUSE_A_COUNT <- as.numeric(as.character(fire_data$NWCG_CAUSE_A_COUNT))
# Check for NA values that may have resulted from conversion
if (any(is.na(fire_data$NWCG_CAUSE_A_COUNT))) {
warning("Some values in NWCG_CAUSE_A_COUNT could not be converted to numeric and are now NA.")
}
# Remove rows with NA values in NWCG_CAUSE_A_COUNT
fire_data <- fire_data %>% filter(!is.na(NWCG_CAUSE_A_COUNT))
} else {
stop("Column 'NWCG_CAUSE_A_COUNT' does not exist in the dataset.")
}
# Load necessary libraries
library(dplyr)
# Load the fire incidence CSV file
fire_data_path <- "C:/Users/SIMBAH/Desktop/Intro to Data science/Project/Fire incidences DC_VA_MD_cleaned.csv"  # Update with your actual path
fire_data <- read.csv(fire_data_path)
# Check the structure of the data
#str(fire_data)
# Summarize the data to get counts of incidents by state and cause
incident_counts <- fire_data %>%
group_by(STATE, NWCG_GENERAL_CAUSE) %>%
summarise(Incident_Count = n(), .groups = 'drop')
# Check the summarized data
print(incident_counts)
# 1. ANOVA: Testing for differences in means across states based on cause
anova_result <- aov(Incident_Count ~ STATE, data = incident_counts)  # Adjust column names as necessary
anova_summary <- summary(anova_result)
print(anova_summary)
# Post-hoc test if ANOVA is significant
if (anova_summary[["Pr(>F)"]][1] < 0.05) {  # Check if p-value is significant
tukey_result <- TukeyHSD(anova_result)  # Perform Tukey's HSD test for pairwise comparisons
print(tukey_result)
}
# Load necessary libraries
library(dplyr)
# Load the fire incidence CSV file
fire_data_path <- "C:/Users/SIMBAH/Desktop/Intro to Data science/Project/Fire incidences DC_VA_MD_cleaned.csv"  # Update with your actual path
fire_data <- read.csv(fire_data_path)
# Check the structure of the data
str(fire_data)
# Summarize the data to get counts of incidents by state and cause
incident_counts <- fire_data %>%
group_by(STATE, NWCG_GENERAL_CAUSE) %>%
summarise(Incident_Count = n(), .groups = 'drop')
# Check the summarized data
print(incident_counts)
# 1. ANOVA: Testing for differences in means across states based on cause
anova_result <- aov(Incident_Count ~ STATE, data = incident_counts)  # Adjust column names as necessary
anova_summary <- summary(anova_result)
# Print ANOVA summary for debugging
print(anova_summary)
# Check if ANOVA summary has results
if (length(anova_summary) > 0 && !is.null(anova_summary[[1]])) {
# Check if p-value is significant
if (anova_summary[[1]][["Pr(>F)"]][1] < 0.05) {
tukey_result <- TukeyHSD(anova_result)  # Perform Tukey's HSD test for pairwise comparisons
print(tukey_result)
} else {
print("No significant differences found in ANOVA.")
}
} else {
print("ANOVA did not produce valid results.")
}
# 2. t-test: Compare Virginia (VA) and Maryland (MD) means
va_incidents <- incident_counts %>% filter(STATE == "VA")  # Using STATE for Virginia
md_incidents <- incident_counts %>% filter(STATE == "MD")  # Using STATE for Maryland
# Ensure there are enough observations
if (nrow(va_incidents) > 0 && nrow(md_incidents) > 0) {
t_test_result <- t.test(va_incidents$Incident_Count, md_incidents$Incident_Count, var.equal = TRUE)  # Adjust as necessary
print(t_test_result)
} else {
print("Not enough data for t-test.")
}
# 3. Confidence Interval for Virginia's mean
if (nrow(va_incidents) > 0) {
mean_va <- mean(va_incidents$Incident_Count, na.rm = TRUE)
std_error_va <- sd(va_incidents$Incident_Count, na.rm = TRUE) / sqrt(nrow(va_incidents))
# 95% Confidence Interval
error_margin <- qt(0.975, df = nrow(va_incidents) - 1) * std_error_va
ci_va <- c(mean_va - error_margin, mean_va + error_margin)
print(paste("95% Confidence Interval for Virginia's mean:", ci_va[1], "to", ci_va[2]))
} else {
print("No data available for Virginia.")
}
# 1. ANOVA: Testing for differences in means across states based on cause
anova_result <- aov(Incident_Count ~ STATE, data = incident_counts)  # Adjust column names as necessary
anova_summary <- summary(anova_result)
# Print ANOVA summary for debugging
print(anova_summary)
# Check if ANOVA summary has results
if (length(anova_summary) > 0 && !is.null(anova_summary)) {
# Check if p-value is significant
if (anova_summary[[1]][["Pr(>F)"]][1] < 0.05) {
tukey_result <- TukeyHSD(anova_result)  # Perform Tukey's HSD test for pairwise comparisons
print(tukey_result)
} else {
print("No significant differences found in ANOVA.")
}
} else {
print("ANOVA did not produce valid results.")
}
# Set CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Install required packages if they are not already installed
required_packages <- c("sf", "ggplot2", "viridis", "dplyr", "lubridate")
new_packages <- required_packages[!(required_packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) {
install.packages(new_packages)
}
# Load libraries
library(sf)
library(ggplot2)
library(viridis)
library(dplyr)
library(lubridate)
# Load necessary libraries
library(dplyr)
# Load the fire incidence CSV file
fire_data_path <- "C:/Users/SIMBAH/Desktop/Intro to Data science/Project/Fire incidences DC_VA_MD_cleaned.csv"  # Update with your actual path
fire_data <- read.csv(fire_data_path)
# Check the structure of the data
str(fire_data)
# Summarize the data to get counts of incidents by state and cause
incident_counts <- fire_data %>%
group_by(STATE, NWCG_GENERAL_CAUSE) %>%
summarise(Incident_Count = n(), .groups = 'drop')
# Check the summarized data
print(incident_counts)
# 1. ANOVA: Testing for differences in means across states based on cause
anova_result <- aov(Incident_Count ~ STATE, data = incident_counts)  # Adjust column names as necessary
anova_summary <- summary(anova_result)
# Print ANOVA summary for debugging
print(anova_summary)
# Check if ANOVA summary has results
if (length(anova_summary) > 0 && !is.null(anova_summary[[1]])) {
# Check if p-value is significant
if (anova_summary[[1]][["Pr(>F)"]][1] < 0.05) {
tukey_result <- TukeyHSD(anova_result)  # Perform Tukey's HSD test for pairwise comparisons
print(tukey_result)
} else {
print("No significant differences found in ANOVA.")
}
} else {
print("ANOVA did not produce valid results.")
}
# 2. t-test: Compare Virginia (VA) and Maryland (MD) means
va_incidents <- incident_counts %>% filter(STATE == "VA")  # Using STATE for Virginia
md_incidents <- incident_counts %>% filter(STATE == "MD")  # Using STATE for Maryland
# Ensure there are enough observations
if (nrow(va_incidents) > 0 && nrow(md_incidents) > 0) {
t_test_result <- t.test(va_incidents$Incident_Count, md_incidents$Incident_Count, var.equal = TRUE)  # Adjust as necessary
print(t_test_result)
} else {
print("Not enough data for t-test.")
}
# 3. Confidence Interval for Virginia's mean
if (nrow(va_incidents) > 0) {
mean_va <- mean(va_incidents$Incident_Count, na.rm = TRUE)
std_error_va <- sd(va_incidents$Incident_Count, na.rm = TRUE) / sqrt(nrow(va_incidents))
# 95% Confidence Interval
error_margin <- qt(0.975, df = nrow(va_incidents) - 1) * std_error_va
ci_va <- c(mean_va - error_margin, mean_va + error_margin)
print(paste("95% Confidence Interval for Virginia's mean:", ci_va[1], "to", ci_va[2]))
} else {
print("No data available for Virginia.")
}
# 1. ANOVA: Testing for differences in means across states based on cause
anova_result <- aov(Incident_Count ~ STATE, data = incident_counts)  # Adjust column names as necessary
anova_summary <- summary(anova_result)
# Print ANOVA summary for debugging
print(anova_summary)
# Check if ANOVA summary has results
if (length(anova_summary) > 0 && !is.null(anova_summary)) {
# Check if p-value is significant
if (anova_summary[[1]][["Pr(>F)"]][1] < 0.05) {
tukey_result <- TukeyHSD(anova_result)  # Perform Tukey's HSD test for pairwise comparisons
print(tukey_result)
} else {
print("No significant differences found in ANOVA.")
}
} else {
print("ANOVA did not produce valid results.")
}
# Set CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Install required packages if they are not already installed
required_packages <- c("sf", "ggplot2", "viridis", "dplyr", "lubridate")
new_packages <- required_packages[!(required_packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) {
install.packages(new_packages)
}
# Load libraries
library(sf)
library(ggplot2)
library(viridis)
library(dplyr)
library(lubridate)
# Common R Markdown options
knitr::opts_chunk$set(results="markup", warning = F, message = F)
# Set options for number display format
options(scientific=T, digits = 3)
# Set global chunk options
knitr::opts_chunk$set(echo = FALSE, results = "markup", warning = FALSE, message = FALSE)
# Set options for number display format
options(scientific = TRUE, digits = 3)
The spatial pattern of fire incidents is a critical area of study, particularly in urban environments where population density and infrastructure can significantly influence fire dynamics. This research project focuses on the spatial distribution of fire incidents in Washington, D.C., Maryland, and Virginia, examining how geographic and environmental factors contribute to the occurrence and frequency of fires.
knitr::opts_chunk$set(echo = FALSE, results = "markup", warning = FALSE, message = FALSE)
# Specify the path to your study area shapefile
shapefile_path <- "C:/Users/SIMBAH/Desktop/Intro to Data science/Project/DC_MD_VA Boundaries/Project_Area.shp"
# Load the shapefile
Study_Area <- st_read(shapefile_path)
# Check the CRS
print(st_crs(Study_Area))
# Transform to NAD83 / UTM Zone 18N (EPSG:26918)
Study_Area <- st_transform(Study_Area, crs = 26918)
# View the structure of the shapefile data
#str(Study_Area)
# Plot the data with labels
library(ggplot2)
library(viridis)
ggplot(data = Study_Area) +
geom_sf(aes(fill = NAME_1), color = "Green") +  # Fill by NAME_1 and add a border
geom_sf_text(aes(label = NAME_1), size = 3, check_overlap = TRUE, color = "black", fontface = "bold") +  # Add labels in bold black
scale_fill_viridis_d(option = "C", name = "Key") +  # Update legend title to "Key"
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
legend.position = "right"  # Position the legend on the right
) +
ggtitle("Project Study Area Map")
